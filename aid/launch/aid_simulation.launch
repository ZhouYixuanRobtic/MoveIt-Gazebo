<launch>
  <arg name="RobotName" default="aid"/>
  <param name="robot_description" textfile="$(find aid)/robots/$(arg RobotName).urdf"/>
  <!-- 1.startup Gazebo -->
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>


  <!-- 2.Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model $(arg RobotName) -param robot_description"/> 		

	<!-- 将Gazebo关节控制器的配置参数加载到参数服务器中 -->
  <rosparam file="$(find aid)/config/$(arg RobotName)_gazebo_control.yaml" command="load"/>
							     

  <!-- 加载控制器 -->
	<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
                                        output="screen" ns="/$(arg RobotName)" args="joint_state_controller $(arg RobotName)_arm_controller"/>
 

  <!-- 3.run transform node /joint_state -> /gazebo every joint/command -->
  <!-- node name="aid_gazebo_driver" pkg="aid_driver" type="aid_gazebo_driver" /-->

  <node name="robot_state_publisher" pkg="robot_state_publisher"  type="robot_state_publisher"  respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg RobotName)/joint_states" />
  </node>


</launch>
